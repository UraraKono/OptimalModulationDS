clc
clear all
close all force
vecspace = @(v1,v2,k) v1+linspace(0,1,k)'.*(v2-v1);
global all_state
%rng(1)
%%
dh_r = [0 3 3 ];
d = dh_r*0;
alpha = dh_r*0;
base = eye(4);
DOFs = length(dh_r)-1;
syms j_state_sym [DOFs 1]
syms y_sym [3, 1] %planar => z=0
syms p_sym [3, 1]
syms dh_r [DOFs 1]
p_s = zeros(DOFs,1);
p_s(1) = pi/2;
p_f = zeros(DOFs,1);
p_f(1) = -pi/2;
q_min = -pi*ones(1, DOFs);
q_max = pi*ones(1, DOFs);
y_min = [-10, -10];
y_max = [10, 10];
state_min = [q_min, y_min, 0.01];
state_max = [q_max, y_max, 10];
%% numeric & symbolic models
n_pts = 20;
link_sym = symbolic_fk_model(j_state_sym,dh_r,d,alpha,base, y_sym, p_sym);
j_state = p_s;
y_pos = [5; 0; 0];
y_r = 1;
link_num = numeric_fk_model(j_state,dh_r,d,alpha,base, y_pos, n_pts);
all_state = [j_state; y_pos(1:2); y_r];
tic;
for i = 1:1:1000
    link_num = numeric_fk_model(j_state,dh_r,0*dh_r,0*dh_r,eye(4), y_pos, 10);
    dst_coll = link_num{1}.mindist - y_r;
    %[dst, n_v] = getClosestDistance(j_state, y_pos, link_sym, dh_r,0*dh_r,0*dh_r,eye(4), 10);
end
toc
%% functions 





function link = symbolic_fk_model(j_state_sym,r,d,alpha,base,y_sym, p_sym)
    DOF = length(r)-1;
    P = dh_fk(j_state_sym,r,d,alpha,base);
    dist = @(x,y) sqrt((x-y)'*(x-y));
    ddist = @(x,y) 1/sqrt((x-y)'*(x-y))*[x(1)-y(1);x(2)-y(2); x(3)-y(3)];
    for i = 1:1:DOF
        link{i}.R = P{i+1}(1:3,1:3);
        link{i}.T = P{i+1}(1:3,4);
        R = link{i}.R;
        T = link{i}.T;
        pos = p_sym'*R'+T';
        link{i}.pos = pos;
        link{i}.dist = dist(pos', y_sym);
        J_TMP = jacobian(pos,j_state_sym);
        J_TMP2 = sym(zeros(size(y_sym,1),DOF));
        J_TMP2(1:size(J_TMP,1),1:1:size(J_TMP,2)) = J_TMP;
        link{i}.rep = ddist(pos',y_sym)' * J_TMP2;
        % get quick handlers
        link{i}.dst_fcn = matlabFunction(link{i}.dist,'Vars',{j_state_sym,y_sym,p_sym});
        link{i}.rep_fcn = matlabFunction(link{i}.rep,'Vars',{j_state_sym,y_sym,p_sym});
    end
end
